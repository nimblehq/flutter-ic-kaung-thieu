def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def debugKeyProperties = new Properties()
def debugKeyPropertiesFile = rootProject.file('debugkey.properties')
if (debugKeyPropertiesFile.exists()) {
    debugKeyPropertiesFile.withReader('UTF-8') { reader ->
        debugKeyProperties.load(reader)
    }
} else {
    throw new GradleException("debugkey.properties not found")
}

def releaseKeyProperties = new Properties()
def releaseKeyPropertiesFile = rootProject.file('releasekey.properties')
if (releaseKeyPropertiesFile.exists()) {
    releaseKeyPropertiesFile.withReader('UTF-8') { reader ->
        releaseKeyProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
apply plugin: 'com.google.gms.google-services'

project.ext.envConfigFiles = [
        stagingdebug: ".env.staging",
        stagingrelease: ".env.staging",
        productiondebug: ".env",
        productionrelease: ".env"
]

apply from: project(':flutter_config').projectDir.getPath() + "/dotenv.gradle"

android {
    compileSdkVersion 31

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        production {
            res.srcDirs = ['src/production/res']
        }
        staging {
            res.srcDirs = ['src/staging/res']
        }
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "co.nimblehq.kaungthieu.survey"
        minSdkVersion 23
        targetSdkVersion 31
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        resValue "string", "build_config_package", "co.nimblehq.kaungthieu.survey"
    }

    signingConfigs {
        debug {
            keyAlias debugKeyProperties.getProperty('keyAlias')
            keyPassword debugKeyProperties.getProperty('keyPassword')
            storeFile file(debugKeyProperties.getProperty('storeFile'))
            storePassword debugKeyProperties.getProperty('storePassword')
        }
        release {
            keyAlias releaseKeyProperties.getProperty('keyAlias')
            keyPassword releaseKeyProperties.getProperty('keyPassword')
            storeFile file(releaseKeyProperties.getProperty('storeFile'))
            storePassword releaseKeyProperties.getProperty('storePassword')
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }

    flavorDimensions "stage"
    productFlavors {
        production {
            applicationId "co.nimblehq.kaungthieu.survey"
            dimension "stage"
        }
        staging {
            dimension "stage"
            applicationId "co.nimblehq.kaungthieu.survey.staging"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation platform('com.google.firebase:firebase-bom:31.3.0')
    implementation 'com.google.firebase:firebase-analytics-ktx'
}
